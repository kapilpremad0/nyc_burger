<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title><%= appName %> â€” Menu with Cart</title>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <!-- BEGIN: Vendor JS-->
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

  <link rel="stylesheet" href="/frontend/style.css">





</head>

<body>

  <div id="form-loader" style="display:none;">
    <img src="/loder.gif" alt="Loading...">
    <p class="fw-bold text-gray-700">Submitting, please wait...</p>
  </div>

  <script>
    function toggleSidebar() {
      document.getElementById("sidebar").classList.toggle("active");
    }

    function toggleCart() {
      document.getElementById("cartPanel").classList.toggle("active");
    }
  </script>
  <div class="wrap">
    <!-- Left Sidebar -->
    <aside class="sidebar" id="sidebar">
      <div class="brand">
        <img src="/logo.jpeg">
        <div id="openBranchModalBtn">
          <h2><%= appName %></h2>
          <div style="font-size:12px;color:var(--muted)">
            <%= appUser && appUser.branch && appUser.branch.name 
      ? `${appUser.branch.name}, ${appUser.branch.city?.name || ''}` 
      : 'No Branch Selected' %></div>
        </div>
      </div>
      <div class="search"><input id="catSearch" placeholder="Search categories..." /></div>
      <div class="categories" id="categoriesList"></div>
    </aside>

    <!-- Main Products -->
    <main class="main">
      <div class="toolbar">
        <h1>Menu</h1>
        <div style="display:flex;gap:10px;align-items:center;flex-wrap:wrap">
          <button class="btn secondary" onclick="toggleSidebar()">â˜° Categories</button>
          <button class="btn" id="cartBtn" onclick="toggleCart()">View Cart (0)</button>
          <a href="/admin/orders" class="btn primary">Orders</a>
        </div>
      </div>
      <div class="products" id="productsArea"></div>
    </main>

    <!-- Right Cart -->
    <!-- Right Cart -->
    <!-- Right Cart -->
    <aside class="cart" id="cartPanel">
      <h2>Your Cart</h2>
      <div class="cart-items" id="cartItems"></div>
      <div class="cart-total" id="cartTotal">Total: â‚¹0</div>

      <!-- Coupon -->
      <div class="cart-options">
        <label for="couponInput">Coupon Code:</label>
        <div class="cart-input-group">
          <input type="text" id="couponInput" placeholder="Enter coupon e.g. FARM10" class="cart-input">
          <button class="btn secondary" onclick="applyCoupon()">Apply</button>
        </div>
      </div>

      <!-- Two-column inputs -->
      <div class="cart-options two-columns">
        <div>
          <label for="orderType">Order Type:</label>
          <select id="orderType" class="cart-select">
            <option value="dinein">Dine In</option>
            <option value="takeaway">Take Away</option>
          </select>
        </div>
        <div>
          <label for="paymentMethod">Payment Method:</label>
          <select id="paymentMethod" class="cart-select">
            <option value="cash">Cash</option>
            <option value="online">Online</option>
          </select>
        </div>
      </div>

      <div class="cart-options two-columns">
        <div>
          <label for="customerMobile">Customer Mobile:</label>
          <input type="text" id="customerMobile" placeholder="Customer Mobile" name="customer_mobile" class="cart-input" maxlength="10">
        </div>
        <div>
          <label for="customerName">Customer Name:</label>
          <input type="text" id="customerName" placeholder="Customer Name" name="customer_name" class="cart-input">
        </div>
      </div>



      <div class="checkout">
        <button class="btn primary" onclick="checkout()">Checkout</button>
      </div>
    </aside>


  </div>




  <!-- pos/index.ejs -->
  <!-- Button to open modal -->
  <!-- <button id="" class="btn btn-primary">Select Branch</button> -->

  <!-- Branch Selection Modal -->
  <div id="branchModal" class="modal">
    <div class="modal-content">
      <h2>Select Branch</h2>
      <form action="/select-branch" method="POST">
        <select name="branch" required>
          <option value="">-- Select Branch --</option>
          <% branches.forEach(branch => { %>
          <option value="<%= branch._id %>" <%= appUser.branch && appUser.branch.name == branch.name ? 'selected' : '' %>><%= branch.name %></option>
          <% }) %>
        </select>
        <div class="modal-actions">
          <button type="submit">Save</button>
          <button type="button" id="closeBranchModalBtn" class="btn btn-secondary">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    const mobileInput = document.getElementById('customerMobile');
    const nameInput = document.getElementById('customerName');

    mobileInput.addEventListener('input', () => {
      // Remove non-digit characters
      mobileInput.value = mobileInput.value.replace(/\D/g, '');

      // Limit to 10 digits
      if (mobileInput.value.length > 10) {
        mobileInput.value = mobileInput.value.slice(0, 10);
      }

      // If 10 digits, fetch customer name
      if (mobileInput.value.length === 10) {
        const mobile = mobileInput.value;

        fetch(`/customers/search?mobile=${mobile}`)
          .then(res => res.json())
          .then(data => {
            if (data && data.name) {
              nameInput.value = data.name;
            } else {
              nameInput.value = '';
            }
          })
          .catch(err => console.error(err));
      } else {
        nameInput.value = '';
      }
    });
  </script>


  <script>
    let MENU = [];
    let cart = {};
    let appliedCoupon = null; // store applied coupon info


    async function fetchMenu() {
      try {
        const res = await fetch("/menu"); // ðŸ‘ˆ Your backend route
        MENU = await res.json();
        renderCategories();
        renderProducts();
        renderCart();
      } catch (err) {
        console.error("Error fetching menu:", err);
      }
    }

    fetchMenu();




    // DOM refs
    const categoriesList = document.getElementById('categoriesList');
    const productsArea = document.getElementById('productsArea');
    const catSearch = document.getElementById('catSearch');
    const cartItems = document.getElementById('cartItems');
    const cartTotal = document.getElementById('cartTotal');
    const cartBtn = document.getElementById('cartBtn');


    // render categories
    function renderCategories(filter = '') {
      categoriesList.innerHTML = '';
      MENU.filter(c => c.title.toLowerCase().includes(filter.toLowerCase()))
        .forEach((cat, idx) => {
          const el = document.createElement('div');
          el.className = 'category' + (idx === 0 ? ' active' : '');
          el.dataset.id = cat.id;
          el.innerHTML = `<img src="/uploads/${cat.img}"/><div><h4>${cat.title}</h4><p>${cat.subtitle}</p></div>`;
          el.onclick = () => {
            scrollToCategory(cat.id);
            setActiveCategory(cat.id);
          }
          categoriesList.appendChild(el);
        });
    }

    // render products
    function renderProducts() {
      productsArea.innerHTML = '';
      MENU.forEach(cat => {
        const sec = document.createElement('section');
        sec.className = 'category-section';
        sec.id = 'section-' + cat.id;
        sec.innerHTML = `<div class="category-title"><h3>${cat.title}</h3></div>`;
        const grid = document.createElement('div');
        grid.className = 'grid';
        cat.items.forEach(item => {
          const card = document.createElement('article');
          card.className = 'card';
          card.innerHTML = `
        <img src="/uploads/${item.img}">
        <div class="info"><h4>${item.name}</h4><div style="font-size:13px;color:var(--muted)">${item.desc}</div></div>
        <div class="actions"><div class="price">â‚¹${item.price}</div>
        <button class="btn" onclick='addToCart("${item.id}")'>Add</button></div>`;
          grid.appendChild(card);
        });
        sec.appendChild(grid);
        productsArea.appendChild(sec);
      });
    }

    // cart functions
    function addToCart(id) {
      let item;
      MENU.forEach(cat => {
        cat.items.forEach(i => {
          if (i.id === id) item = i
        })
      });
      if (!item) return;
      if (cart[id]) cart[id].qty++;
      else cart[id] = {
        ...item,
        qty: 1
      };
      renderCart();
    }

    function changeQty(id, delta) {
      if (cart[id]) {
        cart[id].qty += delta;
        if (cart[id].qty <= 0) delete cart[id];
      }
      renderCart();
    }

    function renderCart() {
      cartItems.innerHTML = '';
      let total = 0,
        count = 0;

      Object.values(cart).forEach(it => {
        total += it.price * it.qty;
        count += it.qty;
        const row = document.createElement('div');
        row.className = 'cart-item';
        row.innerHTML = `
      <div class="cart-item-name">${it.name}</div>
      <div class="cart-item-qty">
        <button onclick='changeQty("${it.id}",-1)'>-</button>
        <span>${it.qty}</span>
        <button onclick='changeQty("${it.id}",1)'>+</button>
      </div>
      <div>â‚¹${it.price * it.qty}</div>`;
        cartItems.appendChild(row);
      });

      let finalTotal = total;

      if (appliedCoupon) {
        finalTotal = total - appliedCoupon.discount;
        const couponRow = document.createElement('div');
        couponRow.style.fontSize = "14px";
        couponRow.style.color = "green";
        couponRow.style.marginTop = "6px";
        couponRow.innerHTML = `
      Coupon (${appliedCoupon.code}) applied: -â‚¹${appliedCoupon.discount} 
      <button style="margin-left:10px;padding:2px 6px;font-size:12px;" onclick="removeCoupon()">Remove</button>
    `;
        cartItems.appendChild(couponRow);
      }

      cartTotal.textContent = 'Total: â‚¹' + finalTotal;
      cartBtn.textContent = 'View Cart (' + count + ')';
    }



    // helpers
    function setActiveCategory(id) {
      document.querySelectorAll('.category').forEach(el => el.classList.toggle('active', el.dataset.id === id));
    }

    function scrollToCategory(id) {
      document.getElementById('section-' + id)?.scrollIntoView({
        behavior: 'smooth'
      });
    }

    catSearch.oninput = e => renderCategories(e.target.value);

    // init
    renderCategories();
    renderProducts();
    renderCart();
  </script>


  <script>
    function removeCoupon() {
      appliedCoupon = null;
      couponInput.value = "";
      renderCart();
      // alert("Coupon removed");
    }



    const couponInput = document.getElementById("couponInput");

    async function applyCoupon() {
      const code = couponInput.value.trim();
      if (!code) return alert("Please enter a coupon code");

      const cartTotalValue = Object.values(cart).reduce((sum, item) => sum + item.price * item.qty, 0);

      try {
        const res = await fetch("/apply-coupon", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            code,
            cartTotal: cartTotalValue
          })
        });
        const data = await res.json();

        if (data.success) {
          appliedCoupon = {
            code: code,
            discount: data.discount
          };
          renderCart(); // re-render cart to show coupon
          // alert(`Coupon applied! Discount: â‚¹${data.discount}`);
        } else {
          alert(data.message || "Invalid coupon");
        }
      } catch (err) {
        console.error(err);
        alert("Something went wrong while applying coupon");
      }
    }
  </script>


  <script>
    async function checkout() {
      if (Object.keys(cart).length === 0) return showErrorToast('Your cart is empty');

      const customerName = document.querySelector('[name="customer_name"]').value.trim();
      const customerMobile = document.querySelector('[name="customer_mobile"]').value.trim();
      const orderType = document.getElementById("orderType").value;
      const paymentMethod = document.getElementById("paymentMethod").value;

      if (!customerName) return showErrorToast('Please enter customer name');

      // Prepare order data
      const orderData = {
        cart: Object.values(cart),
        customerName,
        customerMobile,
        orderType,
        paymentMethod,
        coupon: appliedCoupon ? appliedCoupon.code : null
      };

      try {
        $('#form-loader').show();
        const res = await fetch("/checkout", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(orderData)
        });

        const data = await res.json();

        if (data.success) {
          // alert("Order placed successfully! Order ID: " + data.orderId);
          cart = {};
          appliedCoupon = null;
          couponInput.value = "";
          renderCart();

          const order = data.order;
          let orderId = order.orderId;
          let orderid1 = order._id;

          if (order.paymentMethod == 'online') {
            // window.location.href = `/invoice/${orderId}`;
            window.location.href = `/admin/orders/${orderid1}?showQrCode=true`;
            // payOnline(order.orderId, order.totalAmount, order.customerName, order.customerMobile);
          } else {
            window.location.href = `/invoice/${orderId}`;
            $('#form-loader').hide();
          }


        } else {
          $('#form-loader').hide();
          showErrorToast("Checkout failed: " + data.message)
        }
      } catch (err) {
        console.error(err);
        showErrorToast("Something went wrong during checkout")
      }
    }
  </script>


  <% if (appUser.user_type == 'admin') { %>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const modal = document.getElementById("branchModal");
      const openBtn = document.getElementById("openBranchModalBtn");
      const closeBtn = document.getElementById("closeBranchModalBtn");

      // Auto open modal if no branch is selected
      <% if (!appUser.branch) { %>
      modal.style.display = "flex";
      <% } %>

      // Open modal on button click
      openBtn.addEventListener("click", () => {
        modal.style.display = "flex";
      });

      // Close modal
      closeBtn.addEventListener("click", () => {
        modal.style.display = "none";
      });



      // Close modal if clicking outside
      window.addEventListener("click", (e) => {
        if (e.target === modal) {
          modal.style.display = "none";
        }
      });
    });
  </script>

  <% } %>





  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>
    async function payOnline(orderId, amount, customerName, customerMobile) {
      try {
        // Create Razorpay order on backend
        const response = await fetch('/payment/create-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            amount,
            orderId
          })
        });
        const order = await response.json();
        $('#form-loader').hide();
        const options = {
          key: "<%= process.env.RAZORPAY_KEY_ID %>", // Replace with your key_id
          amount: order.amount,
          currency: order.currency,
          name: "<%= appName %>",
          description: `Order #${orderId}`,
          order_id: order.id,
          handler: async function(res) {
            try {
              // Send payment info to backend for verification
              const verifyRes = await fetch('/payment/verify', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  razorpay_order_id: res.razorpay_order_id,
                  razorpay_payment_id: res.razorpay_payment_id,
                  razorpay_signature: res.razorpay_signature,
                  orderId, // Your orderId
                  amount // Total amount paid
                })
              });

              const data = await verifyRes.json();

              if (data.success) {
                showSuccessToast("Payment completed successfully!")
                // Optionally redirect to invoice or orders page
                window.location.href = `/invoice/${orderId}`;
              } else {
                showErrorToast("Payment verification failed: " + data.message)
              }

            } catch (err) {
              console.error(err);
              showErrorToast("Something went wrong while verifying payment")
            }
          },
          prefill: {
            name: customerName,
            contact: customerMobile
          },
          theme: {
            color: "#2980b9"
          }
        };

        const rzp = new Razorpay(options);
        rzp.open();

      } catch (err) {
        console.error(err);
        showErrorToast("Failed to initiate payment")
      }
    }

    // Trigger payment if online
  </script>

  <script>
    function showSuccessToast(message) {

      Toastify({
        text: message,
        className: "success",
        style: {
          background: "linear-gradient(to right, #00b09b, #96c93d)",
        }
      }).showToast();

    }

    function showErrorToast(message) {

      Toastify({
        text: message,
        className: "success",
        style: {
          background: "linear-gradient(to right, #b73b3c, #b73b3c)",
        }
      }).showToast();

    }
  </script>


</body>

</html>